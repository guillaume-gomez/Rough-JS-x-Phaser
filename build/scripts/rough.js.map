{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/rough/index.js",
    "src/rough/object/Building.js",
    "src/rough/object/House.js",
    "src/rough/object/RoughSpriteGenerator.js",
    "src/rough/object/Sun.js",
    "src/rough/states/GameState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import GameState from 'states/GameState';\n\nclass RoughExample extends Phaser.Game {\n\n  constructor() {\n    super(800, 600, Phaser.AUTO, 'content', null);\n    this.state.add('GameState', GameState, false);\n    this.state.start('GameState');\n  }\n}\n\nnew RoughExample();\n",
    "class Building extends Phaser.Group {\r\n\r\n  constructor(game, roughSpriteGenerator, x, y, width, height, config = {doorConfig: {}, windowConfig: {}, wallConfig: {}}, animated = false) {\r\n    super(game);\r\n    // basement\r\n    const defaultWallConfig = {\r\n      fill: 'rgba(200,200,200,0.8)',\r\n      fillStyle: 'solid'\r\n    };\r\n    console.log(animated);\r\n    let base = null;\r\n    if (animated) {\r\n      base = roughSpriteGenerator.getAnimatedRectangle( x, y, width, height, Object.assign({}, defaultWallConfig, config.wallConfig), 4);\r\n    } else {\r\n      base = roughSpriteGenerator.getRectangleSprite( x, y, width, height, Object.assign({}, defaultWallConfig, config.wallConfig));\r\n    }\r\n    // door\r\n    const doorHeight = height * 0.1;\r\n    const doorWidth = width * 0.15;\r\n    const defaultDoorConfig = {\r\n        fill: 'rgba(0,0,0,0.8)',\r\n        fillStyle: 'solid'\r\n    };\r\n    const door = roughSpriteGenerator.getRectangleSprite(\r\n        x + width/2 - doorWidth/2,\r\n        y + height - doorHeight,\r\n        doorWidth,\r\n        doorHeight,\r\n        Object.assign({}, defaultDoorConfig, config.doorConfig)\r\n    );\r\n    this.add(base);\r\n    this.add(door);\r\n\r\n    //windows\r\n    const windowWidth = 40;\r\n    const windowHeight = 60;\r\n    const spaces = 5;\r\n    const nbFloors = Math.floor((height - doorHeight - 10) / (windowHeight + spaces));\r\n    const nbWindowsByFloor = Math.floor((width - 10) / (windowWidth + spaces));\r\n\r\n    const offsetHeight = (height - doorHeight - (nbFloors * (windowHeight + spaces)) + spaces) / 2;\r\n    const offsetWidth = (width - (nbWindowsByFloor * (windowWidth + spaces)) + spaces) / 2;\r\n\r\n    const defaultWindowConfig = {\r\n        fill: 'rgba(182,211,223,1)',\r\n        fillStyle: 'solid'\r\n    };\r\n    for(let i = 0; i < nbFloors; ++i) {\r\n      for(let j = 0; j < nbWindowsByFloor; ++j) {\r\n        let newWindow = null;\r\n        if (animated) {\r\n          newWindow = roughSpriteGenerator.getAnimatedRectangle(\r\n            x + offsetWidth + j * ( windowWidth + spaces),\r\n            y + offsetHeight + i * (windowHeight + spaces),\r\n            windowWidth,\r\n            windowHeight,\r\n            Object.assign({}, defaultWindowConfig, config.windowConfig),\r\n            4);\r\n        } else {\r\n          newWindow = roughSpriteGenerator.getRectangleSprite(\r\n            x + offsetWidth + j * ( windowWidth + spaces),\r\n            y + offsetHeight + i * (windowHeight + spaces),\r\n            windowWidth,\r\n            windowHeight,\r\n            Object.assign({}, defaultWindowConfig, config.windowConfig));\r\n        }\r\n        this.add(newWindow);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Building;",
    "class House extends Phaser.Group {\r\n\r\nconstructor(game, roughSpriteGenerator, x, y, width, height) {\r\n    super(game);\r\n    const roofHeight = height * 0.35;\r\n    const baseHeight = height * 0.65;\r\n\r\n    // base\r\n    const base = roughSpriteGenerator.getRectangleSprite(x, y + roofHeight, width, baseHeight, {fill: \"pink\", fillStyle:\"solid\"});\r\n    //roof\r\n    const line = roughSpriteGenerator.getLineSprite(x, y + roofHeight, 0, 0, width/2, roofHeight, {fill: \"red\"});\r\n    const line2 = roughSpriteGenerator.getLineSprite(x + width, y + roofHeight, 0, 0, -width/2, roofHeight);\r\n\r\n    // door\r\n    const doorHeight = height * 0.3;\r\n    const doorWidth = width * 0.15;\r\n    const door = roughSpriteGenerator.getRectangleSprite(x + width/2 - doorWidth/2, y + height - doorHeight, doorWidth, doorHeight, { fill: \"red\", fillStyle: \"solid\"});\r\n\r\n    // windows\r\n    const offsetWindow = 15;\r\n    const houseWindow = roughSpriteGenerator.getRectangleSprite(x + offsetWindow, y + height/2, 30, 25, { fill: \"white\", fillStyle: \"solid\"});\r\n    const houseWindow2 = roughSpriteGenerator.getRectangleSprite(x + width - offsetWindow - 30, y + height/2, 30, 25, { fill: \"white\", fillStyle: \"solid\"});\r\n\r\n\r\n    this.add(base);\r\n    this.add(door);\r\n    this.add(line);\r\n    this.add(line2);\r\n    this.add(houseWindow);\r\n    this.add(houseWindow2);\r\n  }\r\n}\r\n\r\nexport default House;",
    "class RoughSpriteGenerator\r\n{\r\n  constructor(game) {\r\n    this.game = game;\r\n  }\r\n\r\n  getRectangle(bmd, width, height, config, x = 0, y = 0) {\r\n    let rc = rough.canvas(bmd.canvas);\r\n    rc.rectangle(x, y, width, height, config);\r\n  }\r\n\r\n  getCircle(bmd, center, radius, config) {\r\n    let rc = rough.canvas(bmd.canvas);\r\n    rc.circle(center.x, center.y, radius * 2, config);\r\n  }\r\n\r\n  getLine(bmd, dist, config) {\r\n    this.getRectangle(bmd, dist, 2, config);\r\n  }\r\n\r\n  getPolygon(bmd, data, config) {\r\n    let rc = rough.canvas(bmd.canvas);\r\n    rc.path(data, config);\r\n  }\r\n\r\n  getCircleSprite(x, y, radius, config = {}) {\r\n    const defaultConfig = {\r\n      fill: \"rgb(10,150,10)\",\r\n      fillWeight: 5 // thicker lines for hachure\r\n    };\r\n    const configs = Object.assign({}, defaultConfig, config);\r\n    const realRadius = radius + (config.fillWeight|| 0);\r\n    let bmd = this.game.add.bitmapData(realRadius * 2, realRadius * 2);\r\n    this.getCircle(bmd, {x: realRadius, y: realRadius}, radius, configs);\r\n    return new Phaser.Sprite(this.game, x, y, bmd);\r\n  }\r\n\r\n  getRectangleSprite(x, y, width, height, config = {}) {\r\n    let bmd = this.game.add.bitmapData(width, height);\r\n    const defaultConfig = {\r\n        fill: 'black',\r\n        stroke: 'black',\r\n        hachureAngle: 60,\r\n        hachureGap: 10,\r\n        fillWeight: 5,\r\n        strokeWidth: 5\r\n      };\r\n    const configs = Object.assign({}, defaultConfig, config);\r\n    this.getRectangle(bmd, width, height, configs);\r\n    return new Phaser.Sprite(this.game, x, y, bmd);\r\n  }\r\n\r\n  getAnimatedRectangle(x,y, width, height, config, nbImages) {\r\n    let bmd = this.game.add.bitmapData(width * nbImages, height);\r\n    for(let i = 0; i < nbImages; i++) {\r\n      this.getRectangle(bmd, width, height, config, (i * width), 0);\r\n    }\r\n    const key = `${x}_${y}_${width}_${height}`;\r\n    this.game.cache.addSpriteSheet(key, null, bmd.canvas, width, height);\r\n\r\n    let sprite = new Phaser.Sprite(this.game, x, y, key);\r\n    const walk = sprite.animations.add('sketch');\r\n    walk.enableUpdate = true;\r\n    sprite.animations.play('sketch', 10, true);\r\n    return sprite;\r\n  }\r\n\r\n  getLineSprite(x, y, x1, y1, x2, y2, config = {}) {\r\n    const dist = this.lengthFromPoints(x1, y1, x2, y2);\r\n    let bmd = this.game.add.bitmapData(dist, 2);\r\n    this.getLine(bmd, dist, config);\r\n    const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\r\n    let sprite = new Phaser.Sprite(this.game, x, y, bmd);\r\n    sprite.angle =- angle;\r\n    return sprite;\r\n  }\r\n\r\n  getPolygonSprite(x,y, data, width, height, config) {\r\n    let bmd = this.game.add.bitmapData(width, height);\r\n    this.getPolygon(bmd, data, config);\r\n    return new Phaser.Sprite(this.game, x, y, bmd);\r\n  }\r\n\r\n  lengthFromPoints(x1, y1, x2, y2) {\r\n     return Math.sqrt( ((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)) );\r\n  }\r\n\r\n}\r\nexport default RoughSpriteGenerator;",
    "class Sun extends Phaser.Group {\r\n\r\nconstructor(game, roughSpriteGenerator, x, y, radius) {\r\n    super(game);\r\n    const offset = 5;\r\n    const offset2 = offset + 2;\r\n    const core = roughSpriteGenerator.getCircleSprite(x + radius/2 , y + radius/2, radius/2 , {fill: \"rgb(255,255,102)\"});\r\n    const line = roughSpriteGenerator.getLineSprite(x, y + radius, 0, 0, radius/2- offset, 0);\r\n    const line2 = roughSpriteGenerator.getLineSprite(x + 1.5 * radius + offset, y + radius, 0, 0, radius/2 - offset, 0);\r\n    const line3 = roughSpriteGenerator.getLineSprite(x + radius, y + radius/2 - offset, 0, 0, 0, radius/2 - offset);\r\n    const line4 = roughSpriteGenerator.getLineSprite(x + radius, y + 2 * radius, 0, 0, 0, radius/2 - offset);\r\n\r\n    const line5 = roughSpriteGenerator.getLineSprite(x + 1.5 * radius, y + radius/2, 0, 0, radius/2 - offset2, radius/2 - offset2);\r\n    const line6 = roughSpriteGenerator.getLineSprite(x + offset2, y + offset2, 0, 0, radius/2 - offset2, -radius/2 + offset2);\r\n    const line7 = roughSpriteGenerator.getLineSprite(x + 1.5 * radius, y + 1.5  * radius, 0, 0, radius/2 - offset2, -radius/2 + offset2);\r\n    const line8 = roughSpriteGenerator.getLineSprite(x + offset2, y + 2 * radius - offset2, 0, 0, radius/2 - offset2 , radius/2 - offset2);\r\n\r\n\r\n    this.add(core);\r\n    this.add(line);\r\n    this.add(line2);\r\n    this.add(line3);\r\n    this.add(line4);\r\n    this.add(line5);\r\n    this.add(line6);\r\n    this.add(line7);\r\n    this.add(line8);\r\n  }\r\n}\r\n\r\nexport default Sun;",
    "import RoughSpriteGenerator from 'object/RoughSpriteGenerator';\nimport Sun from 'object/Sun';\nimport House from 'object/House';\nimport Building from 'object/Building';\n\nclass GameState extends Phaser.State {\n\n  create() {\n    this.game.time.advancedTiming = true;\n    this.game.stage.backgroundColor = \"#a9f1f6\";\n\n    this.game.world.setBounds(0, 0, 1500, 600);\n\n    this.game.physics.startSystem(Phaser.Physics.ARCADE);\n    this.game.physics.arcade.gravity.y = 300;\n    // rough sprite generator\n    const rsg = new RoughSpriteGenerator(this.game);\n\n    this.house = new House(this.game, rsg, 50, this.game.height - 32 - 100, 150, 100);\n    this.game.add.existing(this.house);\n\n    this.house2 = new House(this.game, rsg, this.game.width - 20, this.game.height - 32 - 150, 150, 150);\n    this.game.add.existing(this.house2);\n\n    this.building = new Building(\n      this.game,\n      rsg,\n      250,\n      this.game.height - 32 - 400,\n      200,\n      400,\n      {wallConfig: { fill: \"rgba(226, 78, 46, 1.0)\"}},\n      true\n    );\n    this.game.add.existing(this.building);\n\n    this.building2 = new Building(\n      this.game,\n      rsg,\n      500,\n      this.game.height - 32 - 300,\n      250,\n      300,\n      {wallConfig: { fill: \"rgba(204, 179, 151, 1.0)\"}}\n    );\n    this.game.add.existing(this.building2);\n\n    this.building3 = new Building(\n      this.game,\n      rsg,\n      this.game.world.bounds.width - 400,\n      this.game.height - 32 - 500,\n      200,\n      500,\n      {},\n      true);\n    this.game.add.existing(this.building3);\n\n    this.sun = new Sun(this.game, rsg, 0, 0, 75);\n    this.game.add.existing(this.sun);\n\n    this.cloud = rsg.getPolygonSprite(500, 30, 'M406.1 227.63c-8.23-103.65-144.71-137.8-200.49-49.05 -36.18-20.46-82.33 3.61-85.22 45.9C80.73 229.34 50 263.12 50 304.1c0 44.32 35.93 80.25 80.25 80.25h251.51c44.32 0 80.25-35.93 80.25-80.25C462 268.28 438.52 237.94 406.1 227.63z', 512, 512,{fill: 'white', strokeWidth: 3, fillWeight: 5});\n    this.cloud.scale.setTo(0.45,0.45);\n    // add my own attribute\n    this.cloud.vel = -0.05;\n    this.game.add.existing(this.cloud);\n\n    this.cloud2 = rsg.getPolygonSprite(0, 50, 'M406.1 227.63c-8.23-103.65-144.71-137.8-200.49-49.05 -36.18-20.46-82.33 3.61-85.22 45.9C80.73 229.34 50 263.12 50 304.1c0 44.32 35.93 80.25 80.25 80.25h251.51c44.32 0 80.25-35.93 80.25-80.25C462 268.28 438.52 237.94 406.1 227.63z', 512, 512,{fill: 'white',  strokeWidth: 3, fillWeight: 5});\n    this.cloud2.scale.setTo(0.5,0.5);\n    this.cloud2.vel = 0.08;\n    this.game.add.existing(this.cloud2);\n\n    this.cloud3 = rsg.getPolygonSprite(700, 10, 'M406.1 227.63c-8.23-103.65-144.71-137.8-200.49-49.05 -36.18-20.46-82.33 3.61-85.22 45.9C80.73 229.34 50 263.12 50 304.1c0 44.32 35.93 80.25 80.25 80.25h251.51c44.32 0 80.25-35.93 80.25-80.25C462 268.28 438.52 237.94 406.1 227.63z', 512, 512,{fill: 'white',  strokeWidth: 3, fillWeight: 5});\n    this.cloud3.scale.setTo(0.35,0.35);\n    this.cloud3.vel = 0.1;\n    this.game.add.existing(this.cloud3);\n\n\n    this.group = this.game.add.group();\n    for(let i=0; i < 25; i++) {\n      const rnd = Math.random();\n      const x = this.getRandomInt((i * 50), (i + 1) * 50);\n      const y = this.getRandomInt(350, 450);\n      const config = {\n        fill: this.getRandomColor(),\n        fillWeight: this.getRandomInt(1, 5)\n      }\n      let sprite = null;\n      if(rnd > 0.5) {\n        const radius = this.getRandomInt(10, 25)\n        sprite = rsg.getCircleSprite(x, y, radius, config);\n        this.game.physics.enable(sprite, Phaser.Physics.ARCADE);\n        const realRadius = radius + (config.fillWeight|| 0);\n        sprite.body.setCircle(realRadius);\n      } else {\n        const width = this.getRandomInt(20, 50);\n        const height = this.getRandomInt(20, 50);\n        sprite = rsg.getRectangleSprite(x, y, width, height, config);\n        this.game.physics.enable(sprite, Phaser.Physics.ARCADE);\n      }\n      sprite.body.bounce.setTo (0.80, 0.80);\n      sprite.body.collideWorldBounds = true;\n      sprite.body.velocity.x = this.getRandomInt(-75, 75);\n      this.group.add(sprite);\n    }\n\n    this.character = rsg.getAnimatedRectangle(100, 450, 50, 75, {\n        fill: \"#00B0FF\",\n        roughness: 1.5,\n        strokeWidth: 10,\n        hachureAngle: 90,\n        hachureGap: 5,\n        fillWeight: 5,\n        strokeWidth: 5\n      }, 4);\n    this.game.physics.enable(this.character, Phaser.Physics.ARCADE);\n    this.character.body.collideWorldBounds = true;\n    this.game.add.existing(this.character);\n    this.game.camera.follow(this.character);\n\n    this.ground = rsg.getRectangleSprite(0, this.game.height - 32 , this.game.world.bounds.width, 30, {fill: \"#00A6A6\", strokeWidth: 2});\n    this.game.physics.enable(this.ground, Phaser.Physics.ARCADE);\n    this.ground.body.allowGravity = false;\n    this.ground.body.immovable = true;\n    this.game.add.existing(this.ground);\n\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n  }\n\n  preload() {\n  }\n\n  cloudManagement() {\n    [this.cloud, this.cloud2, this.cloud3].forEach(cloud => {\n      if(cloud.x + cloud.width > this.game.world.bounds.width) {\n        cloud.x = 0;\n      } else if(cloud.x + cloud.width < 0) {\n        cloud.x = this.game.world.bounds.width - cloud.width;\n      } else {\n        cloud.x += cloud.vel;\n      }\n    });\n  }\n\n  update() {\n    this.game.physics.arcade.collide(this.character, this.ground);\n    this.game.physics.arcade.collide(this.group, this.ground);\n\n    this.character.body.velocity.x = 0;\n    if (this.cursors.left.isDown)\n    {\n        this.character.body.velocity.x = -150;\n    }\n    else if (this.cursors.right.isDown)\n    {\n        this.character.body.velocity.x = 150;\n    }\n\n    if ((this.cursors.up.isDown || this.jumpButton.isDown) && !this.character.body.touching.none)\n    {\n        this.character.body.velocity.y = -300;\n    }\n\n    this.cloudManagement();\n  }\n\n  render() {\n    this.game.debug.text(this.game.time.fps, 2, 14, \"#00ff00\");\n    //this.game.debug.spriteBounds(this.house)\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n}\n\nexport default GameState;\n"
  ]
}